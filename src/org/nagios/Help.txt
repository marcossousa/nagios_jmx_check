Usage: check_jmx -U url -O object_name -A attribute [-K compound_key] [-I attribute_info] [-J attribute_info_key] -w warn_limit -c crit_limit [-v[vvv]] [-help]

, where options are:

-help 
	Prints this page
	
-U 
	JMX URL, for example: "service:jmx:rmi:///jndi/rmi://localhost:1616/jmxrmi"
	
-O 
    Object name to be checked, for example, "java.lang:type=Memory"
    
-A 
	Attribute of the object to be checked, for example, "NonHeapMemoryUsage". 
	If the attribute is String type and K is provided, we'll assume the content is a JSON.
	
-K 
    Attribute key for -A attribute compound data, for example, "used" (optional).
    For json you can use ":" get inner properties. Ex:
    default:status {"default" : {"status": "running"}} will return "running"
	
-I
    Attribute of the object containing information for text output (optional)
    
-J 
    Attribute key for -I attribute compound data, for example, "used" (optional)

-v[vvv]
	verbatim level controlled as a number of v (optional)
	
-T
	Value type "L" number value or "S" strings (default is Number)

-w 
	Warning value 

-c
	Critical value

-e
	Expected value

Note that if expected value is provided, OK status need to be equal. 
But if warning level > critical, system checks object attribute value to be LESS THAN OR EQUAL warning, critical
If warning level < critical, system checks object attribute value to be MORE THAN OR EQUAL warning, critical

To string data type all values (warning, critical and expected) must be equal with the returned value, otherwise UNKNOWN will be returned
